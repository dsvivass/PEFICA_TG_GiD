#################################################
#      GiD-Tcl procedures invoked by GiD        #
#################################################
proc InitGIDProject { dir } {
    PEFICA_TG::SetDir $dir ;#store to use it later
    PEFICA_TG::ModifyMenus
    gid_groups_conds::open_conditions menu
    PEFICA_TG::CreateWindow  ;#create a window as Tcl example (random surface creation)       
}

proc SaveGIDProject { filespd } {
	PEFICA_TG::ImprimirResultados
}
 
proc ChangedLanguage { language } {
    PEFICA_TG::ModifyMenus ;#to customize again the menu re-created for the new language
}

proc AfterWriteCalcFileGIDProject { filename errorflag } {   
    if { ![info exists gid_groups_conds::doc] } {
        WarnWin [= "Error: data not OK"]
        return
    }    
    set err [catch { PEFICA_TG::WriteCalculationFile $filename } ret]
    if { $err } {       
        WarnWin [= "Error when preparing data for analysis (%s)" $::errorInfo]
        set ret -cancel-
    }
    return $ret
}

#################################################
#      namespace implementing procedures        #
#################################################
namespace eval PEFICA_TG { 
    variable problemtype_dir 
}

proc PEFICA_TG::SetDir { dir } {  
    variable problemtype_dir
    set problemtype_dir $dir
}

proc PEFICA_TG::GetDir { } {  
    variable problemtype_dir
    return $problemtype_dir
}

proc PEFICA_TG::ModifyMenus { } {   
    if { [GidUtils::IsTkDisabled] } {  
        return
    }          
    foreach menu_name {Conditions Interval "Interval Data" "Local axes"} {
        GidChangeDataLabel $menu_name ""
    }       
    GidAddUserDataOptions --- 1    
    GidAddUserDataOptions [= "Data tree"] [list GidUtils::ToggleWindow CUSTOMLIB] 2
    set x_path {/*/container[@n="Properties"]/container[@n="materials"]}
    GidAddUserDataOptions [= "Import/export materials"] [list gid_groups_conds::import_export_materials .gid $x_path] 3
    GiDMenu::UpdateMenus
}

######################################################################
# example procedures asking GiD_Info and doing things with GiD_Process
proc PEFICA_TG::CreateWindow { } {  
    if { [GidUtils::AreWindowsDisabled] } {
        return
    }  
    if { [GiD_Info geometry NumSurfaces] > 0 } {
        #only offer to create a new random surface if there is no more surfaces in the current model
        return
    }
    set w .gid.win_example
    InitWindow $w [= "PEFICA_TG.tcl - Example tcl file"] ExampleCMAS "" "" 1
    if { ![winfo exists $w] } return ;# windows disabled || usemorewindows == 0
    ttk::frame $w.top -style ridge.TFrame
    ttk::label $w.top.title_text -text [= "TCL window example for CMAS2D problem type"] -font BigFont
    ttk::frame $w.information -style ridge.TFrame
    label $w.information.help -text [= "This problemtype allows the user to compute the center of mass of a given 2D geometry. \
      \nThe geometry can be generated by the user or a random surface can be created"]
    $w.information.help configure -wraplength 320 -justify left
    ttk::frame $w.bottom -style BottomFrame.TFrame
    ttk::button $w.bottom.start  -style BottomFrame.TButton \
	-text [= "Continue"] -command [list destroy $w]
    # ttk::button $w.bottom.random -text [= "Random surface"] -command [list Cmas2d::CreateRandomSurfaceAsk $w]
    ttk::button $w.bottom.random  -style BottomFrame.TButton \
	-text [= "Random surface"] -command \
	"PEFICA_TG::CreateRandomSurface; GiD_Process 'Zoom Frame escape escape escape; destroy $w"
    grid $w.top.title_text -sticky ew -padx 6 -pady 6
    grid $w.top -sticky new   
    grid $w.information.help -sticky we -padx 6 -pady 6
    grid $w.information -sticky nsew    
    grid $w.bottom.start $w.bottom.random -padx 6 -pady 12 -sticky ew
    grid $w.bottom -sticky sew
    if { $::tcl_version >= 8.5 } { grid anchor $w.bottom center }
    grid rowconfigure $w 0 -weight 1
    grid rowconfigure $w 1 -weight 1
    grid rowconfigure $w 2 -weight 1
    grid columnconfigure $w 0 -weight 1    
}

proc PEFICA_TG::CreateRandomSurfaceAsk {w} {
    set ret [tk_dialogRAM $w.dialog [= "Warning!!"] [= "Warning: this will create a nurbs surface in your current project"] "" 1 [= "Ok"] [= "Cancel"]]    
    if {$ret ==0} {
        destroy $w
        PEFICA_TG::CreateRandomSurface        
        GiD_Process 'Zoom Frame escape escape escape
    }
}

proc PEFICA_TG::CreateRandomSurface {} {
    set a_x [expr rand()*10]
    set a_y [expr rand()*10]    
    set b_x [expr $a_x+rand()*10]
    set b_y [expr $a_y+rand()*10]    
    set c_x [expr $b_x+rand()*10]
    set c_y [expr $b_y-rand()*10]    
    if {$a_y < $c_y} {
        set d_y [expr $a_y-rand()*10]
        set d_x [expr $a_x+rand()*10]
    } else {
        set d_y [expr $c_y-rand()*10] 
        set d_x [expr $c_x-rand()*10]
    }
    set next_line_id [GiD_Info Geometry MaxNumLines]
    GiD_Process Mescape Geometry Create Line $a_x,$a_y,0 $b_x,$b_y,0 $c_x,$c_y,0 $d_x,$d_y,0 close escape
    GiD_Process Mescape Geometry Create NurbsSurface [expr $next_line_id+1]:[expr $next_line_id+4] escape escape
    GiD_Process 'Zoom Frame
}

######################################################################
#  auxiliary procs invoked from the tree (see .spd xml description)
proc PEFICA_TG::Traermateriales { domNode args } {    
    set x_path {//container[@n="materials"]}
    set dom_materiales [$domNode selectNodes $x_path]
    if { $dom_materiales == "" } {
        error [= "xpath '%s' not found in the spd file" $x_path]
    } 
    set image material
    set result [list]
    foreach dom_material [$dom_materiales childNodes] {
        set name [$dom_material @name] 
        lappend result [list 0 $name $name $image 1]
    }
    return [join $result ,]
}

proc PEFICA_TG::TraerTiposApoyos { domNode args } {    
    set x_path {//container[@n="grado_apoyos"]}
    set dom_grado_apoyos [$domNode selectNodes $x_path]
    if { $dom_grado_apoyos == "" } {
        error [= "xpath '%s' not found in the spd file" $x_path]
    } 
    set image material
    set result [list]
    foreach dom_grado_apoyo [$dom_grado_apoyos childNodes] {
        set name [$dom_grado_apoyo @name] 
        lappend result [list 0 $name $name $image 1]
    }
    return [join $result ,]
}

proc PEFICA_TG::DrawSymbolWeigth { values_list } {
    variable _opengl_draw_list
    if { ![info exists _opengl_draw_list(t_analisis)] } {
        variable problemtype_dir
        set _opengl_draw_list(t_analisis) [GiD_OpenGL draw -genlists 1]
        GiD_OpenGL draw -newlist $_opengl_draw_list(t_analisis) compile
        set filename_mesh [file join [PEFICA_TG::GetDir] symbols weight_2d.msh]
        gid_groups_conds::import_gid_mesh_as_openGL $filename_mesh black blue
    }   
	GiD_OpenGL draw -endlist
    set weigth_and_unit [lrange [lindex $values_list [lsearch -index 0 $values_list t_analisis]] 1 2]
    set t_analisis [lindex $weigth_and_unit 0]
    set scale [expr {$t_analisis*0.1}]
    set transform_matrix [list $scale 0 0 0 0 $scale 0 0 0 0 $scale 0 0 0 0 1]
    set list_id [GiD_OpenGL draw -genlists 1]
    GiD_OpenGL draw -newlist $list_id compile
    GiD_OpenGL draw -pushmatrix -multmatrix $transform_matrix
    GiD_OpenGL draw -call $_opengl_draw_list(t_analisis)
    GiD_OpenGL draw -popmatrix
    GiD_OpenGL draw -endlist
    return $list_id
}
# proc PEFICA_TG::TipoDeAnalisis { domNode args } {
	# set x_path {//container[@n="tipo_analisis"]}
	# set dom_tipo_analisis [$domNode selectNodes $x_path]
	# if { $dom_tipo_analisis == "" } {
        # error [= "xpath '%s' not found in the spd file" $x_path]
    # } 
	# set image "navy-length-18"
	# set result [list]
    # foreach dom_tipo_viga [$dom_tipo_analisis childNodes] {
	# set name [$dom_tipo_viga @name]
	# lappend result [list 0 $name $name $image 1]
	# }
    # return [join $result ,]
# }

proc PEFICA_TG::ImprimirResultados {  } {
	GiD_WriteCalculationFile init {C:\Program Files\GiD\GiD 14.0.2\problemtypes\PEFICA_TG.gid\resultados\ result.txt}
	GiD_WriteCalculationFile puts {TIPR = 11}
	GiD_WriteCalculationFile puts {IMPR = 8}
	GiD_WriteCalculationFile puts {CAT = [ ...}
	GiD_WriteCalculationFile puts "length [gid_groups_conds::give_active_unit L^4] mass [gid_groups_conds::give_active_unit M]"
	GiD_WriteCalculationFile puts "[GiD_Info Geometry NumPoints]"
	GiD_WriteCalculationFile puts {]}
	#GiD_WriteCalculationFile puts "[GiD_AccessValue -index get -default intvdata ]"
	#GiD_WriteCalculationFile puts [GiD_Info conditions ovline]
	#GiD_WriteCalculationFile puts [[$::gid_groups_conds::doc documentElement] asXML]


	set document [$::gid_groups_conds::doc documentElement]
	#set xpath "/PEFICA_TG/container\[@n = Properties\]/condition\[@n = 'Shells' \]/group"
	set xpath "/PEFICA_TG/container\[@n = 'fuerzas'\]/container\[@n = 'distribuidas'\]/condition\[@n = 'aplicar_f_distribuida' \]/group/value\[@n='fuerza_dist_constante'\]"
	foreach group_node [$document selectNodes $xpath] {
    set group_id [get_domnode_attribute $group_node name]
	GiD_WriteCalculationFile puts $group_id
}

    set nombre [GiD_Groups list $group_id]
	GiD_WriteCalculationFile puts [GiD_Info conditions ovpnt]
	GiD_WriteCalculationFile puts [GiD_Info conditions ovline]
	GiD_WriteCalculationFile puts [GiD_Info conditions ovsurf]
	GiD_WriteCalculationFile puts [GiD_Info conditions ovvol]
	GiD_WriteCalculationFile puts [GiD_Info conditions ovlayer]
	GiD_WriteCalculationFile puts [GiD_Info conditions ovgroup]
	# GiD_WriteCalculationFile puts [GiD_Groups get num_conditions $nombre ]
	# GiD_WriteCalculationFile $nombre

	# set num_coordinates [GiD_WriteCalculationFile coordinates -count ""]
    # GiD_WriteCalculationFile puts "num coordinates: $num_coordinates"
	# for {set i 0} {$i<=$num_coordinates} {incr i 1} {
	# set coordinates($i) [GiD_Info coordinates $i] ;   
	# GiD_WriteCalculationFile puts "coordinates: $i $coordinates($i)"
	# }
	GiD_WriteCalculationFile end
	# customlib::InitWriteFile $result
    # customlib::WriteString "=================================================================="
    # customlib::WriteString "                        General Data File"    
    # customlib::WriteString "=================================================================="
    # customlib::WriteString "Units:"
    # customlib::WriteString "length [gid_groups_conds::give_active_unit L] mass [gid_groups_conds::give_active_unit M]"
    # customlib::WriteString "Number of elements and nodes:"
    # customlib::WriteString "[GiD_Info Mesh NumElements] [GiD_Info Mesh NumNodes]"    
    # customlib::WriteString ""
	#customlib::EndWriteFile
}


proc PEFICA_TG::Editar { domNode dict boundary_conds args } {
    set has_container ""
    set database materiales    
    set title [= "User defined"]      
    set list_name [$domNode @n]    
    set x_path {//container[@n="materials"]}
    set dom_materiales [$domNode selectNodes $x_path]
    if { $dom_materiales == "" } {
        error [= "xpath '%s' not found in the spd file" $x_path]
    }
    set primary_level material
    if { [dict exists $dict $list_name] } {
        set xps $x_path
        append xps [format_xpath {/blockdata[@n=%s and @name=%s]} $primary_level [dict get $dict $list_name]]
    } else { 
        set xps "" 
    }
    set domNodes [gid_groups_conds::edit_tree_parts_window -accepted_n $primary_level -select_only_one 1 $boundary_conds $title $x_path $xps]          
    set dict ""
    if { [llength $domNodes] } {
        set domNode [lindex $domNodes 0]
        if { [$domNode @n] == $primary_level } {      
            dict set dict $list_name [$domNode @name]
        }
    }
    return [list $dict ""]
}

proc PEFICA_TG::Traerseccion { domNode args } {    
    set x_path {//container[@n="secciones"]}
    set dom_secciones [$domNode selectNodes $x_path]
    if { $dom_secciones == "" } {
        error [= "xpath '%s' not found in the spd file" $x_path]
    } 
    set image material
    set result [list]
    foreach dom_seccion [$dom_secciones childNodes] {
        set name [$dom_seccion @name] 
        lappend result [list 0 $name $name $image 1]
    }
    return [join $result ,]
}

proc PEFICA_TG::Editarseccion { domNode dict boundary_conds args } {
    set has_container ""
    set database seccion    
    set title [= "User defined"]      
    set list_name [$domNode @n]    
    set x_path {//container[@n="seccion"]}
    set dom_secciones [$domNode selectNodes $x_path]
    if { $dom_seccion == "" } {
        error [= "xpath '%s' not found in the spd file" $x_path]
    }
    set primary_level seccion
    if { [dict exists $dict $list_name] } {
        set xps $x_path
        append xps [format_xpath {/blockdata[@n=%s and @name=%s]} $primary_level [dict get $dict $list_name]]
    } else { 
        set xps "" 
    }
    set domNodes [gid_groups_conds::edit_tree_parts_window -accepted_n $primary_level -select_only_one 1 $boundary_conds $title $x_path $xps]          
    set dict ""
    if { [llength $domNodes] } {
        set domNode [lindex $domNodes 0]
        if { [$domNode @n] == $primary_level } {      
            dict set dict $list_name [$domNode @name]
        }
    }
    return [list $dict ""]
}
proc PEFICA_TG::Escribir { list_condition_n parameters_n {unit_mode "default"}} {
	set formats [dict create]
	foreach cond $list_condition_n {
        foreach {k v} [customlib::GetElementsFormats $cond $parameters_n $unit_mode] {
            	dict set formats $k $v
}	
}
GiD_WriteCalculationFile elements $formats
}

proc PEFICA_TG::Escribir2 { list_condition_n parameters_n {unit_mode "default"}} {
	set formats [dict create]
	foreach cond $list_condition_n {
        foreach {k v} [customlib::GetElementsFormats $cond $parameters_n $unit_mode] {
            	dict set formats $k $v
	GiD_WriteCalculationFile nodes $formats
}
}
}

proc PEFICA_TG::WriteConnectivities {list_condition_n parameters {unit_mode "default"}} {
    foreach condition_n $list_condition_n {
        set formats [customlib::GetElementsFormats $condition_n $parameters $unit_mode]

        GiD_WriteCalculationFile connectivities -elements_faces all $formats
    }
}

###################################################################################
#      print data in the .dat calculation file (instead of a classic .bas template)
proc PEFICA_TG::WriteCalculationFile { filename } {
    customlib::InitWriteFile $filename
    set elements_conditions [list "Shells"]
    # This instruction is mandatory for using materials
    customlib::InitMaterials $elements_conditions active
    customlib::WriteString "% =================================================================="
    customlib::WriteString "%                        General Data File"    
    customlib::WriteString "% =================================================================="
    customlib::WriteString "% Units:"
    customlib::WriteString "% length [gid_groups_conds::give_active_unit L] mass [gid_groups_conds::give_active_unit M]"
    customlib::WriteString "% Number of elements and nodes:"
    customlib::WriteString "% ................................................................."
    customlib::WriteString ""    
	customlib::WriteString "% [GiD_Info Mesh NumElements] [GiD_Info Mesh NumNodes]"    
    customlib::WriteString "% Material      Surface density [gid_groups_conds::give_active_unit M/L^2]"
    customlib::WriteString ""
    customlib::WriteString "IMPR=8;"
    customlib::WriteString "TIPR=11;"
	customlib::WriteString " %   EYOU    INER   TIPE   A   Kz   MPOISS   "
	set document [$::gid_groups_conds::doc documentElement]
		set xpath "/PEFICA_TG/container\[@n='c_analisis'\]/value\[@n = 'tipo_analisis' \]"
		foreach group_node [$document selectNodes $xpath] {
		set group_id [get_domnode_attribute $group_node v]
	}
	if { $group_id == {Euler_Bernoulli}} {
    customlib::WriteString {CAT = [ ...}
	customlib::WriteMaterials [list {"%13.5e" "material" "mod_elast"} {"%13.5e" "material" "iner"} {"%4d" "material" "t_an"}] used active
    customlib::WriteString {];}
	} else {
    customlib::WriteString {CAT = [ ...}
	customlib::WriteMaterials [list {"%13.5e" "material" "mod_elast"} {"%13.5e" "material" "iner"} {"%4d" "material" "t_an"} {"%13.5e" "material" "area"} {"%13.5e" "material" "mod_timo"} {"%13.5e" "material" "mod_poisson"}] used active
    customlib::WriteString {];}
	}
    customlib::WriteString ""
    customlib::WriteString "% ................................................................."
    customlib::WriteString ""    
	customlib::WriteString "%    Element    Node(1)   Node(2)    Material     inercia"
	customlib::WriteString {ELE = [ ...}
	set element_formats [list {"%10d" "element" "id"} {"%10d" "material" "MID"} {"%10d" "element" "connectivities"} ]
	PEFICA_TG::WriteConnectivities $elements_conditions $element_formats active
    customlib::WriteString {];}
    customlib::WriteString {ELE(:,1)=[];}
	################### COORDINATES ############################ 
    set units_mesh [gid_groups_conds::give_mesh_unit]
    customlib::WriteString ""
    customlib::WriteString ""
    customlib::WriteString "% ................................................................."
    customlib::WriteString ""    
    customlib::WriteString "% Coordinates:"
    customlib::WriteString "% X $units_mesh"
    customlib::WriteString {XYZ = [ ...}	            
    customlib::WriteCoordinates "%.0s %14.5e %.0s%.0s\n"
    customlib::WriteString {];}	
    # Example for 3D case
    #customlib::WriteCoordinates "%5d %14.5e %14.5e %14.5e\n"
    #################### CONNECTIVITIES ############################    
    customlib::WriteString ""
    customlib::WriteString "% ................................................................."
    customlib::WriteString ""
    customlib::WriteString "% Categorias:"
	
	# set xpath2 "/PEFICA_TG/container\[@n = 'Properties' \]/condition\[@n = 'asig_secc' \]/group/value\[@n='iner'\]"
	# foreach group_node2 [$document selectNodes $xpath2] {
		# set group_id2 [get_domnode_attribute $group_node2 v]
	# customlib::WriteString $group_id2
	# }
	#customlib::WriteString [[$::gid_groups_conds::doc documentElement] asXML]
	#set x_path {/*/container[@n="secciones"]/container[@n="iner"]}
	# set list_of_condition_names [list "asig_secc"]
	# set parameters [list {"%13.5e" "property" "iner"}]
	#GiD_WriteCalculationFile puts "[customlib::WriteNodes $list_of_condition_names $parameters][customlib::WriteNodes $list_of_condition_names $parameters]"
	# set puntos_inercia [customlib::WriteNodes $list_of_condition_names $parameters]
	# set listap [list puntos_inercia]
	# GiD_WriteCalculationFile puts "$listap $listap"
#customlib::WriteNodes $list_of_condition_names $parameters
#customlib::WriteString [GiD_Info conditions ovline]
 

#################### MATERIALS ############################
    set num_materials [customlib::GetNumberOfMaterials used]
    customlib::WriteString ""
    customlib::WriteString "% ................................................................."
    customlib::WriteString ""
    #################### CONCENTRATE WEIGHTS ############################
    customlib::WriteString ""
    customlib::WriteString "% ................................................................."
    customlib::WriteString ""
	customlib::WriteString "% Nudo    indy   indz    VAUY     VAUZ"
    customlib::WriteString {UCO = [ ...}	
    set condition_list [list "asig_restriccion"]
    set condition_formats [list {"%1d" "node" "id"} {"%4d" "property" "ind_y"} {"%4d" "property" "ind_z"} {"%13.5e" "property" "rest_y"} {"%13.5e" "property" "rest_z"}]
    # set number_of_conditions [customlib::GetNumberOfNodes $condition_list]
    # customlib::WriteString "Concentrate Weights:"
    # customlib::WriteString $number_of_conditions
    # customlib::WriteString "Node   Mass [gid_groups_conds::give_active_unit M]"
    customlib::WriteNodes $condition_list $condition_formats "" active
    customlib::WriteString {];}
    customlib::WriteString ""
    customlib::WriteString "% ................................................................."
    customlib::WriteString ""
    set condition_list1 [list "aplicar_f_puntual"]
    set condition_formats1 [list {"%1d" "node" "id"} {"%13.5e" "property" "f_puntual"} {"%13.5e" "property" "momento"}]	
    customlib::WriteString "% Nudo    FUNY     FUMZ"
    customlib::WriteString {FUN = [ ...}
    customlib::WriteNodes $condition_list1 $condition_formats1 "" active
    customlib::WriteString {];}
    customlib::WriteString ""
    customlib::WriteString "% ................................................................."
    customlib::WriteString ""
    set condition_list2 [list "aplicar_f_distribuida"]
    set condition_formats2 [list {"%10d" "element" "id"} {"%13.5e" "property" "fuerza_dist_constante"}]	
    customlib::WriteString "% Nudo    WELE"
    customlib::WriteString {FDI = [ ...}
    PEFICA_TG::Escribir $condition_list2 $condition_formats2 
    customlib::WriteString {];} 
    customlib::WriteString ""
    customlib::WriteString "% ................................................................."
    customlib::WriteString ""
    set condition_list3 [list "aplicar_f_distribuida_lineal"]
    set condition_formats3 [list {"%10d" "element" "id"} {"%13.5e" "property" "m_ini"} {"%13.5e" "property" "m_fin"}]
	customlib::WriteString {FDIL = [ ...}
    PEFICA_TG::Escribir $condition_list3 $condition_formats3 
    customlib::WriteString {];} 
	set conditions [GiD_Info conditions ovpnt]
    customlib::WriteString "$conditions"
    customlib::WriteString [GiD_Info conditions ovline]
    customlib::WriteString [GiD_Info conditions ovsurf]
    customlib::WriteString [GiD_Info conditions ovvol]
    customlib::WriteString [GiD_Info conditions ovlayer]
    customlib::WriteString [GiD_Info conditions ovgroup]
	customlib::EndWriteFile ;#finish writting

	set p1 $filename
	set p2 ".dat"
	set nombre [string trim $p1 $p2]
	set archivo_m [open "$nombre.m" w]
	set archivo_dat [open "$filename" r]

	while { [gets $archivo_dat data] >= 0 } {
	   puts $archivo_m $data
	}
	close $archivo_dat
	close $archivo_m

}
